{"version":3,"sources":["components/Header.js","components/Loading.js","helpers.js","components/EpisodesList.js","components/TvShow.js","components/App.js","components/NotFound.js","components/EpisodeDetail.js","serviceWorker.js","actions/index.js","reducers/index.js","index.js"],"names":["Header","react_default","a","createElement","className","Link","to","Component","LoaderExampleInline","Loader","active","inline","removeHTMLTags","str","undefined","toString","replace","EpisodeList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","episodes","_this2","url","concat","axios","get","then","response","setState","data","catch","error","console","log","getDefaultEpisodeState","_this$state","Loading","react","map","episode","index","key","id","name","summary","TvShow","tv_show","getDefaultShowState","src","image","original","alt","EpisodesList","connect","App","components_Header","components_TvShow","NotFound","EpisodeDetail","episode_id","match","params","getEpisode","role","Boolean","window","location","hostname","SET_TV_SHOW","rootReducer","combineReducers","tvShow","arguments","length","action","type","store","createStore","ReactDOM","render","es","BrowserRouter","Switch","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oOAeeA,mLAVX,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,0DACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,WAAWE,GAAG,KAA9B,iBALSC,8BCENC,EAFa,kBAAMP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,QAAM,EAACC,QAAM,KCHhD,SAASC,EAAeC,GAE7B,YAAYC,IAARD,GAA6B,OAARA,GAAwB,KAARA,IAGzCA,EAAMA,EAAIE,YACCC,QALG,gBAKY,yBC6DbC,cA5Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,SAAS,EACTC,SAAU,IALKT,wFASM,IAAAU,EAAAP,KAEjBQ,EAAG,+BAAAC,OADG,KACH,aAETC,IAAMC,IAAIH,GACPI,KAAK,SAACC,GACLN,EAAKO,SAAS,CACZT,SAAS,EACTC,SAAUO,EAASE,SAGtBC,MAAM,SAACC,GACNC,QAAQC,IAAIF,iDAKhBjB,KAAKoB,0DAGE,IAAAC,EACqBrB,KAAKI,MAA3BC,EADCgB,EACDhB,QAASC,EADRe,EACQf,SACf,OAAOD,EAuBH1B,EAAAC,EAAAC,cAACyC,EAAD,MArBA3C,EAAAC,EAAAC,cAAC0C,EAAA,SAAD,KACE5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAEXwB,EAASkB,IAAI,SAACC,EAASC,GAAV,OACX/C,EAAAC,EAAAC,cAAA,OAAK8C,IAAMD,EAAQ5C,UAAU,0BAC3BH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,4BACZH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAE,cAAAyB,OAAgBgB,EAAQG,KAC7BH,EAAQI,OAGblD,EAAAC,EAAAC,cAAA,KAAGC,UAAU,+BACTQ,EAAemC,EAAQK,sBA7CnB7C,aCCpB8C,cACJ,SAAAA,EAAYnC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,IACjBlC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiC,GAAA5B,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,SAAS,EACT2B,QAAS,GACT1B,SAAU,IANKT,qFAUG,IAAAU,EAAAP,KAEdQ,EAAG,8CAAAC,OADG,uBAGZC,IAAMC,IAAIH,GACPI,KAAK,SAACC,GACLN,EAAKO,SAAS,CACZT,SAAS,EACT2B,QAASnB,EAASE,SAGrBC,MAAM,SAACC,GACNC,QAAQC,IAAIF,iDAKhBjB,KAAKiC,uDAGE,IAAAZ,EAC8BrB,KAAKI,MAApCC,EADCgB,EACDhB,QAAS2B,EADRX,EACQW,QAAS1B,EADjBe,EACiBf,SACxB,OAAMD,EAiCF1B,EAAAC,EAAAC,cAACyC,EAAD,MA/BA3C,EAAAC,EAAAC,cAAC0C,EAAA,SAAD,KACE5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAEbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAChBH,EAAAC,EAAAC,cAAA,OACEqD,IAAKF,EAAQG,MAAMC,SACnBC,IAAKL,EAAQH,SAKnBlD,EAAAC,EAAAC,cAAA,WAASC,UAAU,qCAEjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2CAA2CkD,EAAQH,MAEjElD,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uCACVQ,EAAe0C,EAAQF,UAG1BnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qCAAd,YACAH,EAAAC,EAAAC,cAACyD,EAAD,CAAchC,SAAUA,eAzDnBrB,aA4ENsD,kBAJf,SAAyBnC,GACvB,OAAOA,GAG+B,KAAzBmC,CAA+BR,GCjE/BS,2LAXX,OACE7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4D,EAAD,MACA9D,EAAAC,EAAAC,cAAA,WAASC,UAAU,oBACjBH,EAAAC,EAAAC,cAAC6D,EAAD,eANQzD,cCIH0D,EAPE,kBACfhE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,mEC0EW+D,cAvEb,SAAAA,EAAYhD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4C,IACjB/C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8C,GAAAzC,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,SAAS,EACTwC,WAAYhD,EAAKD,MAAMkD,MAAMC,OAAOnB,IALrB/B,4EASN,IAAAU,EAAAP,KACPQ,EAAG,kCAAAC,OAAqCT,KAAKI,MAAMyC,YACvDnC,IAAMC,IAAIH,GACPI,KAAK,SAACC,GACLN,EAAKO,SAAS,CACZT,SAAS,EACToB,QAASZ,EAASE,SAGrBC,MAAM,SAACC,GACNC,QAAQC,IAAIF,iDAKhBjB,KAAKgD,8CAGE,IAAA3B,EACoBrB,KAAKI,MAA1BC,EADCgB,EACDhB,QAASoB,EADRJ,EACQI,QACf,OAAMpB,EAoCF1B,EAAAC,EAAAC,cAACyC,EAAD,MAlCA3C,EAAAC,EAAAC,cAAC0C,EAAA,SAAD,KACE5C,EAAAC,EAAAC,cAAC4D,EAAD,MACA9D,EAAAC,EAAAC,cAAA,WAASC,UAAU,oBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAEbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAChBH,EAAAC,EAAAC,cAAA,OACEqD,IAAKT,EAAQU,MAAMC,SACnBC,IAAKZ,EAAQI,SAKnBlD,EAAAC,EAAAC,cAAA,WAASC,UAAU,6CACjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2CACX2C,EAAQI,MAGXlD,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uCACVQ,EAAemC,EAAQK,WAG5BnD,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,IAAIF,UAAU,gCAAgCmE,KAAK,UAA5D,2BAxDYhE,aCKRiE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASP,MACvB,uEClBOQ,EAAc,cCc3B,IAEeC,EAFKC,YAAgB,CAAEC,OATtC,WAAoC,IAApBrD,EAAoBsD,UAAAC,OAAA,QAAAnE,IAAAkE,UAAA,GAAAA,UAAA,GAAZ,GAAIE,EAAQF,UAAAC,OAAA,EAAAD,UAAA,QAAAlE,EAClC,OAAOoE,EAAOC,MACZ,KAAKP,EACH,OAAOM,EAAO5B,QAChB,QACE,OAAO5B,MCIP0D,EAAQC,YAAYR,GAE1BS,IAASC,OACPtF,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CAAUJ,MAAOA,GACfnF,EAAAC,EAAAC,cAACsF,EAAA,EAAD,KACExF,EAAAC,EAAAC,cAACuF,EAAA,EAAD,KACEzF,EAAAC,EAAAC,cAACwF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhC,IACjC7D,EAAAC,EAAAC,cAACwF,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWzC,IAClCpD,EAAAC,EAAAC,cAACwF,EAAA,EAAD,CAAOE,KAAK,iBAAiBC,UAAW5B,IACxCjE,EAAAC,EAAAC,cAACwF,EAAA,EAAD,CAAOG,UAAW7B,OAItB8B,SAASC,eAAe,SHsGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjE,KAAK,SAAAkE,GACjCA,EAAaC","file":"static/js/main.43c67786.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className=\"App-header ui inverted vertical center aligned segment\">\n          <div className=\"ui container\">\n            <Link className=\"App-link\" to=\"/\">Maze</Link>\n          </div>\n      </header>\n    )\n  }\n}\n\nexport default Header;\n","import React from 'react'\nimport { Loader } from 'semantic-ui-react'\n\nconst LoaderExampleInline = () => <Loader active inline />\n\nexport default LoaderExampleInline\n","export function removeHTMLTags(str) {\n  const regex = /(<([^>]+)>)/ig;\n  if (str === undefined || str === null || str === '') {\n    return false;\n  }\n  str = str.toString();\n  return str.replace(regex, '');\n}\n\nexport function hyphenateQueryForApiCall(str) {\n  str = str.replace(/\\s+/g, '-').toLowerCase();\n  return str;\n}\n","import React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom'\nimport Loading from './Loading';\nimport { removeHTMLTags } from '../helpers';\nimport axios from 'axios';\n\nclass EpisodeList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      episodes: ''\n    }\n  }\n\n  getDefaultEpisodeState() {\n    let query = 6771;\n    const url = `http://api.tvmaze.com/shows/${query}/episodes`;\n\n    axios.get(url)\n      .then((response) => {\n        this.setState({\n          loading: false,\n          episodes: response.data\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  componentDidMount() {\n    this.getDefaultEpisodeState();\n  }\n\n  render() {\n    let { loading, episodes } = this.state;\n    if ( ! loading) {\n      return (\n        <Fragment>\n          <div className=\"ui-episodes-list\">\n            {\n              episodes.map((episode, index) => (\n                <div key={ index } className=\"ui-episodes-list__item\">\n                  <h3 className=\"ui-episodes-list__header\">\n                    <Link to={`/tv-detail/${episode.id}`}>\n                      {episode.name}\n                    </Link>\n                  </h3>\n                  <p className=\"ui-episodes-list__paragraph\">\n                    { removeHTMLTags(episode.summary) }\n                  </p>\n                </div>\n              ))\n            }\n          </div>\n        </Fragment>\n      )\n    } else {\n      return (\n        <Loading />\n      )\n    }\n  }\n}\n\nexport default EpisodeList;\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport Loading from './Loading';\nimport { removeHTMLTags } from '../helpers';\nimport EpisodesList from './EpisodesList';\nimport axios from 'axios';\n\nclass TvShow extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      tv_show: '',\n      episodes: ''\n    }\n  }\n\n  getDefaultShowState() {\n    let query = 'the-powerpuff-girls';\n    const url = `http://api.tvmaze.com/singlesearch/shows?q=${query}`;\n\n    axios.get(url)\n      .then((response) => {\n        this.setState({\n          loading: false,\n          tv_show: response.data\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  componentDidMount() {\n    this.getDefaultShowState();\n  }\n\n  render() {\n    let { loading, tv_show, episodes } = this.state;\n    if( ! loading) {\n      return (\n        <Fragment>\n          <div className=\"[ ui grid stackable ]\">\n\n            <aside className=\"six wide column\">\n              <figure className=\"ui-cover-img\">\n                <img\n                  src={tv_show.image.original}\n                  alt={tv_show.name}\n                  />\n              </figure>\n            </aside>\n\n            <article className=\"ten wide column ui-episode-detail\">\n\n              <h1 className=\"ui-episode-detail__heading--extra-large\">{tv_show.name}</h1>\n\n              <p className=\"ui-episode-detail__paragraph--large\">\n                {removeHTMLTags(tv_show.summary)}\n              </p>\n\n              <div className=\"row\">\n                <h2 className=\"ui-episode-detail__heading--large\">Episodes</h2>\n                <EpisodesList episodes={episodes} />\n              </div>\n            </article>\n\n          </div>\n        </Fragment>\n      )\n    } else {\n      return (\n        <Loading />\n      )\n    }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return state;\n}\n\nexport default connect(mapStateToProps, null)(TvShow);\n","import React, { Component } from 'react';\nimport Header from './Header';\nimport TvShow from './TvShow';\nimport '../assets/sass/App.sass';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <section className=\"[ ui container ]\">\n          <TvShow />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\n\nconst NotFound = () => (\n  <div>\n    <h2>Not Found!!!!!</h2>\n    <p>Sorry the page you are looking for is no longer here</p>\n  </div>\n);\n\nexport default NotFound;\n","import React, { Component, Fragment } from 'react';\nimport Header from '../components/Header';\nimport Loading from './Loading';\nimport { Link } from 'react-router-dom'\nimport { removeHTMLTags } from '../helpers';\nimport axios from 'axios';\n\nclass EpisodeDetail extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      episode_id: this.props.match.params.id\n    }\n  }\n\n  getEpisode() {\n    let url = `http://api.tvmaze.com/episodes/${this.state.episode_id}`;\n    axios.get(url)\n      .then((response) => {\n        this.setState({\n          loading: false,\n          episode: response.data\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  componentDidMount() {\n    this.getEpisode();\n  }\n\n  render() {\n    let { loading, episode } = this.state;\n    if( ! loading) {\n      return (\n        <Fragment>\n          <Header />\n          <section className=\"[ ui container ]\">\n            <div className=\"[ ui grid stackable ]\">\n\n              <aside className=\"six wide column\">\n                <figure className=\"ui-cover-img\">\n                  <img\n                    src={episode.image.original}\n                    alt={episode.name}\n                    />\n                </figure>\n              </aside>\n\n              <article className=\"[ ten wide column ] [ ui-episode-detail ]\">\n                <h1 className=\"ui-episode-detail__heading--extra-large\">\n                  {episode.name}\n                </h1>\n\n                <p className=\"ui-episode-detail__paragraph--large\">\n                  {removeHTMLTags(episode.summary)}\n                </p>\n              </article>\n              <footer>\n                <Link to=\"/\" className='[ ui yellow inverted button ]' role='button'>\n                    Back to home\n                </Link>\n              </footer>\n            </div>\n          </section>\n        </Fragment>\n      )\n    } else {\n      return (\n        <Loading />\n      )\n    }\n  }\n}\n\nexport default EpisodeDetail;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const SET_TV_SHOW = 'SET_TV_SHOW';\n\nexport function setTvShow(tv_show) {\n  return {\n    type: 'SET_TV_SHOW',\n    tv_show\n  }\n}\n\n","import { combineReducers } from 'redux';\nimport { SET_TV_SHOW } from '../actions';\n\n// a reducer take two params, a state variable and an action,\n// we will assign empty state by default to the state variable.\nfunction tvShow(state = [], action) {\n  switch(action.type) {\n    case SET_TV_SHOW:\n      return action.tv_show;\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({ tvShow });\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport App from './components/App';\nimport NotFound from './components/NotFound';\nimport TvShow from './components/TvShow';\nimport EpisodeDetail from './components/EpisodeDetail';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/tv-show\" component={TvShow} />\n        <Route path=\"/tv-detail/:id\" component={EpisodeDetail} />\n        <Route component={NotFound} />\n      </Switch>\n    </BrowserRouter>\n  </Provider>\n  , document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}